Ver 1: 
x Create a program that solves simple sudokus inefficiently.
x Refactor code into multiple subroutines
x Can read in space-delimited text files.
x Sudoku struct including 2D Matrix representation. 
x Exit in case of error instead of return 1.
- Initialize a dataBlock structure (eg 3 x 3 block in a 9 x 9 matrix)
x Refactor readMatrix into own function
- Implement backtracking algorithm
- Can solve simple sudoku
- Is extendible with different algorithms.
- Learn to bump history in Github, .gitignore


Programmming goals:
- Become more efficient with vim and more familiar with visual studio code.
- Think about data representations and make sure the code is extendable.

Ver 2: 
- Add command line recognizition of filename=mytext.txt using fgets and regex
https://www.quora.com/What-are-some-better-alternatives-to-scanf-in-C-and-what-do-they-do-exactly
- Increase portability by typedeffing eg. int becomes int 32
- Check for memory leaks (valgrind), replace malloc with calloc


Programming goals:
- Start tracking changes with git
- Become more efficient in compiling & running the code.

Ver 3:
- Add test cases
- Implement more efficient possMatrix
- Graph the timings of different algorithms.
- Increase the portability of the code
- Refactor code to make more extendible.

Ver 4:
- Implement race conditions per box
- Add ability to queue multiple sudoku's
- Graph the timings accross sudoku's across algorithms

Ver 5:
- Host online version of the sudoku maker and solver.
- Add cloud computing support

Ver 6:
- Add photo mode, make picture of sudoku, translates into matrix
- Make it possible to automatically fetch sudokus from a website.
- Convert ints to a shorter type depending on needed number range?


Programming goals:
- Completely mouse-free coding.


*/

Lessons learned:

- Be more consistent with casing. CAPITALS for globals. camelCase for local vars.
- Be more granular with commits. One thing at a time.

There has to be an easier way to delete THIS:
(int arg1, int arg2, int THIS);